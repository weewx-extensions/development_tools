name: Analyze and test the code

on:
  workflow_call:
    inputs:
      module-name:
        required: true
        type: string
        description: 'The module to process.'
      python-version:
        required: true
        type: string
        description: ''
      weewx-version:
        required: true
        type: string
        description: ''
      latest-python-version:
        required: true
        type: string
        description: ''
      latest-weewx-version:
        required: true
        type: string
        description: ''
      pip-list:
        required: false
        type: string
        default: ''
        description: 'Additional pip packages to be installed.'
      package-list:
        required: false
        type: string
        default: ''
        description: 'Additional OS packages to be installed.'
      lint:
        required: false
        type: boolean
        default: true
      unit-test:
        required: false
        type: boolean
        default: true
      function-test:
        required: false
        type: boolean
        default: true
      integration-test:
        required: false
        type: boolean
        default: true
      code-coverage:
        required: false
        type: boolean
        default: true
      coveralls-upload:
        required: false
        type: boolean
        default: true
      codecov-upload:
        required: false
        type: boolean
        default: true
      sonar-scan:
        required: false
        type: boolean
        default: true
      local:
        required: false
        type: string
        default: 'false'
    secrets:
      COVERALLS_REPO_TOKEN:
        required: true
      CODECOV_TOKEN:
        required: true
      SONAR_TOKEN:
        required: true
      GITHUB_TOKEN:
        required: true

jobs:
  build:
    name: ${{ inputs.python-version }} ${{ inputs.weewx-version }}
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ inputs.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ inputs.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install coverage coveralls configobj flake8 mock pytest pytest-cov pytest-html
        WEEWX_VERSION=${{inputs.weewx-version}}
        if [ ${WEEWX_VERSION:0:6} == 'branch' ]; then
          pip install git+https://github.com/weewx/weewx.git@${WEEWX_VERSION:7}
        else
          python -m pip install weewx==${{ inputs.weewx-version }}
        fi
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

        if [ "${{inputs.pip-list}}" != "" ]; then 
          python -m pip install ${{inputs.pip-list}}; 
        fi

        sudo apt-get update

        if [ "${{inputs.package-list}}" != "" ]; then sudo apt-get -qq --assume-yes install ${{inputs.package-list}}; fi

    - name: Lint with flake8
      if: ${{inputs.lint}}
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 --tee --output-file=results/flake8.txt bin/user --exclude tests --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 --tee --output-file=results/flake8.txt bin/user --exclude tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Unit tests
      if: ${{inputs.unit-test}}
      run: |
        export PYTHONPATH=bin:$PYTHONPATH
        pytest bin/user/tests/unit --html=results/unittests.html --self-contained-html
    
    - name: Function tests
      if: ${{inputs.function-test}}
      run: |
        export PYTHONPATH=bin:$PYTHONPATH
        pytest bin/user/tests/func --html=results/functests.html --self-contained-html

    - name: Integration tests
      if: ${{inputs.integration-test}}
      run: |
        export PYTHONPATH=bin:$PYTHONPATH
        pytest bin/user/tests/integ --html=results/integtests.html --self-contained-html


    - name: Code Coverage
    # Only run code coverage once, against the latest python version and weewx version
      if: ${{ inputs.python-version == inputs.latest-python-version && 
              inputs.weewx-version == inputs.latest-weewx-version}}
      run: |
        export PYTHONPATH=bin:$PYTHONPATH
        coverage run --branch -m pytest bin/user/tests/unit
        # Create a human readable coverage report
        coverage html --include bin/user/${{inputs.module-name}}.py -d results/coverage
        # Create an xml coverage report, used by: coveralls, codecov, sonar
        coverage xml --include bin/user/${{inputs.module-name}}.py
  
    - name: Archive test-results
      uses: actions/upload-artifact@v4
      with:
        name: test-${{ inputs.python-version }}-${{ inputs.weewx-version }}
        path: results

    - name: Upload coverage to Coveralls 
      if: ${{ inputs.coveralls-upload &&
              inputs.python-version == inputs.latest-python-version && 
              inputs.weewx-version == inputs.latest-weewx-version}}
      run: |
        if [ "${{inputs.local}}" == "true" ]; then 
          export COVERALLS_SERVICE_NUMBER=$(date +%s);
          export CI_BRANCH=local;
          export GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN}}
        fi
        coveralls
      env:
        COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}

    - name: Upload coverage to Codecov
      if: ${{ inputs.codecov-upload &&
              inputs.python-version == inputs.latest-python-version && 
              inputs.weewx-version == inputs.latest-weewx-version}}
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        override_branch: ${{ inputs.local == 'true' && 'local' || '' }}
        override_commit: ${{ inputs.local == 'true' && 'local' || '' }}

    - name: SonarQube Scan
      if: ${{ inputs.sonar-scan && 
              inputs.python-version == inputs.latest-python-version && 
              inputs.weewx-version == inputs.latest-weewx-version}}
      uses: SonarSource/sonarqube-scan-action@v5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
